{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "a4d513bd",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pyglet\n",
    "win = pyglet.window.Window()\n",
    "\n",
    "@win.event\n",
    "def on_draw():\n",
    "    win.clear()\n",
    "    \n",
    "pyglet.app.run()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "fbe857ce",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pyglet\n",
    "\n",
    "window = pyglet.window.Window()\n",
    "label = pyglet.text.Label('Hello , World',\n",
    "                          font_name='Time New Roman',\n",
    "                          font_size=36,\n",
    "                          x=window.width//2, y=window.height//2,\n",
    "                          anchor_x='center', anchor_y='center')\n",
    "@window.event\n",
    "def on_draw():\n",
    "    window.clear()\n",
    "    label.draw()\n",
    "    \n",
    "pyglet.app.run()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "9deac814",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "33.84877460000001\n",
      "0.022280799999975898\n",
      "0.015488600000026054\n",
      "0.03227649999999471\n",
      "0.01813389999998094\n",
      "0.02668520000000285\n",
      "0.023522900000017444\n",
      "0.028082699999998795\n",
      "0.0587620999999956\n",
      "0.03152299999999286\n",
      "0.03693020000000047\n",
      "0.019844699999993054\n",
      "0.022102200000006178\n",
      "0.026098799999999756\n",
      "0.028541899999993348\n",
      "0.021025900000012143\n",
      "0.02359830000000329\n",
      "0.025124900000008665\n",
      "0.02763449999997647\n",
      "0.025034400000009782\n",
      "0.025011299999988523\n",
      "0.024855000000002292\n",
      "0.025915600000018912\n",
      "0.024783999999982598\n",
      "0.02454729999999472\n",
      "0.030109600000002956\n",
      "0.02512560000002395\n",
      "0.021795299999979534\n",
      "0.02377620000001457\n",
      "0.022147599999982504\n",
      "0.030499700000007124\n",
      "0.024836200000009967\n",
      "0.01881950000000643\n",
      "0.02654479999998216\n",
      "0.024148200000013276\n",
      "0.02592379999998684\n",
      "0.025327800000013667\n",
      "0.024908499999980904\n",
      "0.028260200000005398\n",
      "0.021416799999997238\n",
      "0.02619610000002126\n",
      "0.026062699999982897\n",
      "0.024845999999996593\n",
      "0.026023800000018582\n",
      "0.024277399999988347\n",
      "0.023643599999985554\n",
      "0.025095400000026302\n",
      "0.027351199999998244\n",
      "0.025742499999978463\n",
      "0.022934200000008786\n",
      "0.025407099999995353\n",
      "0.025181700000018736\n",
      "0.024679399999996576\n",
      "0.025410599999986516\n",
      "0.021128199999992603\n",
      "0.024937399999998888\n",
      "0.026790900000008833\n",
      "0.02385060000000294\n",
      "0.02702339999999026\n",
      "0.023352299999999104\n",
      "0.02348240000000601\n",
      "0.026853100000010954\n",
      "0.024054199999994808\n",
      "0.025606100000004517\n",
      "0.024087799999989556\n",
      "0.026649700000007215\n",
      "0.02601580000001036\n",
      "0.023913099999987253\n",
      "0.025598900000005642\n",
      "0.02718189999998799\n",
      "0.022758400000014944\n",
      "0.024256699999995135\n",
      "0.024365799999998217\n",
      "0.02482019999999352\n",
      "0.024095900000020265\n",
      "0.03111499999999978\n",
      "0.027580699999987246\n",
      "0.022331799999989244\n",
      "0.02560870000002069\n",
      "0.02040119999998069\n",
      "0.024685800000014524\n",
      "0.025940200000007962\n",
      "0.02391469999997753\n",
      "0.029988099999997075\n",
      "0.03410660000000121\n",
      "0.022566800000021203\n",
      "0.016751900000002706\n",
      "0.02241359999999304\n",
      "0.024850799999995843\n",
      "0.02638369999999668\n",
      "0.02513999999999328\n",
      "0.02629720000001612\n",
      "0.02575170000000071\n",
      "0.026319199999988996\n",
      "0.027736099999998487\n",
      "0.020440000000007785\n",
      "0.026445199999983515\n",
      "0.026279000000016595\n",
      "0.02116709999998534\n",
      "0.024335199999995893\n",
      "0.025305100000025504\n",
      "0.02795119999998974\n",
      "0.02094249999998965\n",
      "0.02320350000002236\n",
      "0.023921099999995477\n",
      "0.028575799999998708\n",
      "0.03182939999999235\n",
      "0.017782000000011067\n",
      "0.025124399999981506\n",
      "0.029572800000011057\n",
      "0.026489300000008598\n",
      "0.03343119999999544\n",
      "0.042765500000001566\n",
      "0.017742900000001782\n",
      "0.023686799999978803\n",
      "0.02277639999999792\n",
      "0.027816500000000133\n",
      "0.02539600000000064\n",
      "0.02402539999999931\n",
      "0.02748560000000566\n",
      "0.0269363000000169\n",
      "0.020853599999981043\n",
      "0.024264500000015232\n",
      "0.02512279999999123\n",
      "0.026130099999988943\n",
      "0.022975200000018958\n",
      "0.02724399999999605\n",
      "0.025129999999990105\n",
      "0.022514800000010382\n",
      "0.02476110000000631\n",
      "0.024637799999993604\n",
      "0.02654390000000717\n",
      "0.02585030000000188\n",
      "0.022604999999998654\n",
      "0.03332000000000335\n",
      "0.07649909999997817\n",
      "0.015621900000013511\n",
      "0.02432269999999903\n"
     ]
    }
   ],
   "source": [
    "import pyglet\n",
    "\n",
    "window = pyglet.window.Window()\n",
    "label = pyglet.text.Label('Hello , World',\n",
    "                          #font_name='Time New Roman',\n",
    "                          #font_size=36,\n",
    "                          x=window.width//2, y=window.height//2,\n",
    "                          anchor_x='center', anchor_y='center')\n",
    "def update(dt):\n",
    "    print(dt)\n",
    "    label.x += 1\n",
    "    label.y += 1\n",
    "    \n",
    "@window.event\n",
    "def on_draw():\n",
    "    window.clear()\n",
    "    label.draw()\n",
    "pyglet.clock.schedule(update)    \n",
    "pyglet.app.run()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "953a1f79",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "84.5535003\n",
      "0.017613899999986415\n",
      "0.013364500000022872\n",
      "0.0259633000000008\n",
      "0.03135369999998261\n",
      "0.021763100000015356\n",
      "0.026592199999981858\n",
      "0.02439950000001545\n",
      "0.027807800000005045\n",
      "0.02278769999998076\n",
      "0.02746380000002091\n",
      "0.02168129999998314\n",
      "0.02277069999999526\n",
      "0.02332649999999603\n",
      "0.026207300000010036\n",
      "0.02498439999999391\n",
      "0.02468630000001326\n",
      "0.02504170000000272\n",
      "0.02449419999999236\n",
      "0.025847400000003518\n",
      "0.026805700000011257\n",
      "0.021858899999983805\n",
      "0.025458299999996825\n",
      "0.02429670000000783\n",
      "0.02522279999999455\n",
      "0.026095099999992044\n",
      "0.024582400000014104\n",
      "0.03158849999999802\n",
      "0.02289300000001049\n",
      "0.02458120000000008\n",
      "0.02142169999999055\n",
      "0.02555279999998561\n",
      "0.02373440000002347\n",
      "0.02455630000000042\n",
      "0.025430599999992864\n",
      "0.02425629999999046\n",
      "0.028717000000000326\n",
      "0.028811600000011595\n",
      "0.019737300000002733\n",
      "0.021980999999982487\n",
      "0.025128800000004503\n",
      "0.025604600000008304\n",
      "0.024935699999986127\n",
      "0.02447550000002252\n",
      "0.025237999999973226\n",
      "0.030795300000022507\n",
      "0.020106400000003077\n",
      "0.023378299999990304\n",
      "0.0272205999999926\n",
      "0.025444399999997813\n",
      "0.023931200000021136\n",
      "0.02602890000000002\n",
      "0.027423499999997603\n",
      "0.025410299999975905\n",
      "0.024692000000015923\n",
      "0.019850599999983842\n",
      "0.024888500000002978\n",
      "0.026394000000010465\n",
      "0.0252179999999953\n",
      "0.0236268000000166\n",
      "0.024852499999980182\n",
      "0.026245700000004035\n",
      "0.03332800000001157\n",
      "0.015505599999983133\n",
      "0.024960200000009536\n",
      "0.02417209999998704\n",
      "0.02612520000002405\n",
      "0.02456449999999677\n",
      "0.02964299999999298\n",
      "0.029461499999996477\n",
      "0.017852300000015475\n",
      "0.027900199999976394\n",
      "0.02257120000001578\n",
      "0.024845499999997855\n",
      "0.023049999999983584\n",
      "0.02570030000001111\n",
      "0.025039300000003095\n",
      "0.023893600000008064\n",
      "0.027018499999996948\n",
      "0.026510299999984\n",
      "0.0221870000000024\n",
      "0.025425500000011425\n",
      "0.024960800000002337\n",
      "0.02466989999999214\n",
      "0.02523859999999445\n",
      "0.02515470000000164\n",
      "0.025898799999993116\n",
      "0.024633500000021513\n",
      "0.024861799999996492\n",
      "0.02351179999999431\n",
      "0.025560200000001032\n",
      "0.025373199999989993\n",
      "0.02412320000001955\n",
      "0.026623699999987593\n",
      "0.02642470000000685\n",
      "0.023198899999982814\n",
      "0.024365799999998217\n",
      "0.023284300000000258\n",
      "0.025684300000023086\n",
      "0.023605199999991555\n",
      "0.02530780000000732\n",
      "0.02599019999999541\n",
      "0.02397120000000541\n",
      "0.025583399999987932\n",
      "0.024989000000005035\n",
      "0.02629699999999957\n",
      "0.02351459999999861\n",
      "0.033167999999989206\n",
      "0.022225800000001072\n",
      "0.023514000000005808\n",
      "0.032250599999997576\n",
      "0.021989100000013195\n",
      "0.025368200000002616\n",
      "0.023257199999989098\n",
      "0.02757399999998711\n",
      "0.02269580000000815\n",
      "0.02259870000000319\n",
      "0.021606300000001966\n",
      "0.03068859999999063\n",
      "0.02400760000000446\n",
      "0.02671910000000821\n",
      "0.01931849999999713\n",
      "0.02680920000000242\n",
      "0.02451590000001147\n",
      "0.02516799999997943\n",
      "0.024560699999994995\n",
      "0.02884030000001303\n",
      "0.02166209999998614\n",
      "0.02658519999999953\n",
      "0.02550670000002242\n",
      "0.023746799999997847\n",
      "0.02356240000000298\n",
      "0.026279099999982236\n",
      "0.025555499999995845\n",
      "0.04425370000001294\n",
      "0.030883700000003955\n",
      "0.027194500000007338\n",
      "0.018897099999975353\n",
      "0.02772230000002196\n",
      "0.02652159999999526\n",
      "0.019465599999989536\n",
      "0.023622200000005478\n",
      "0.031205800000009276\n",
      "0.022383899999994128\n",
      "0.026155799999997953\n",
      "0.025102299999986144\n",
      "0.025860300000005054\n",
      "0.022982200000001285\n",
      "0.024639600000000428\n",
      "0.024310900000017455\n",
      "0.02700279999999111\n",
      "0.02173869999998601\n",
      "0.025817000000017742\n",
      "0.028561599999989085\n",
      "0.02448090000001457\n",
      "0.030881499999992457\n",
      "0.05243029999999749\n",
      "0.04272240000000238\n",
      "0.021795800000006693\n"
     ]
    }
   ],
   "source": [
    "import pyglet\n",
    "from pyglet.window import key\n",
    "\n",
    "window = pyglet.window.Window()\n",
    "\n",
    "@window.event\n",
    "def on_key_press(symbol, modifiers):\n",
    "    if symbol == key.A:\n",
    "        print('The \"A\" key was pressed.')\n",
    "    elif symbol == key.B:\n",
    "        print('The \"B\" key was pressed.')\n",
    "    elif symbol == key.C:\n",
    "        print('The \"C\" key was pressed.')\n",
    "    elif symbol == key.D:\n",
    "        print('The \"D\" key was pressed.')\n",
    "    elif symbol == key.E:\n",
    "        print('The \"E\" key was pressed.')\n",
    "    elif symbol == key.F:\n",
    "        print('The \"F\" key was pressed.')\n",
    "    elif symbol == key.G:\n",
    "        print('The \"G\" key was pressed.')\n",
    "    elif symbol == key.H:\n",
    "        print('The \"H\" key was pressed.')\n",
    "    elif symbol == key.I:\n",
    "        print('The \"I\" key was pressed.')\n",
    "    elif symbol == key.G:\n",
    "        print('The \"G\" key was pressed.')\n",
    "    elif symbol == key.K:\n",
    "        print('The \"K\" key was pressed.')\n",
    "    elif symbol == key.L:\n",
    "        print('The \"L\" key was pressed.')\n",
    "    elif symbol == key.M:\n",
    "        print('The \"M\" key was pressed.')\n",
    "    elif symbol == key.N:\n",
    "        print('The \"N\" key was pressed.')\n",
    "    elif symbol == key.O:\n",
    "        print('The \"O\" key was pressed.')\n",
    "    elif symbol == key.P:\n",
    "        print('The \"P\" key was pressed.')\n",
    "    elif symbol == key.Q:\n",
    "        print('The \"Q\" key was pressed.')\n",
    "    elif symbol == key.R:\n",
    "        print('The \"R\" key was pressed.')\n",
    "    elif symbol == key.S:\n",
    "        print('The \"S\" key was pressed.')\n",
    "    elif symbol == key.T:\n",
    "        print('The \"T\" key was pressed.')\n",
    "    elif symbol == key.U:\n",
    "        print('The \"U\" key was pressed.')\n",
    "    elif symbol == key.V:\n",
    "        print('The \"V\" key was pressed.')\n",
    "    elif symbol == key.W:\n",
    "        print('The \"W\" key was pressed.')\n",
    "    elif symbol == key.X:\n",
    "        print('The \"X\" key was pressed.')\n",
    "    elif symbol == key.Y:\n",
    "        print('The \"Y\" key was pressed.')\n",
    "    elif symbol == key.Z:\n",
    "        print('The \"Z\" key was pressed.')   \n",
    "    elif symbol == key.LEFT:\n",
    "        print('The left arrow key was pressed.')\n",
    "    elif symbol == key.ENTER:\n",
    "        print('The enter key was pressed.')\n",
    "        \n",
    "@window.event\n",
    "def on_draw():\n",
    "    window.clear()\n",
    "    \n",
    "pyglet.app.run()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c36772fe",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pyglet\n",
    "from pyglet.window import mouse\n",
    "\n",
    "window = pyglet.window.Window\n",
    "\n",
    "@window.event\n",
    "def on_mouse_press(x, y, button, modifiers):\n",
    "    if button == mouse.LEFT:\n",
    "        print('The left mouse button was pressed.')\n",
    "        \n",
    "@window.event\n",
    "def on_draw():\n",
    "    window.clear()\n",
    "    \n",
    "pyglet.app.run()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
